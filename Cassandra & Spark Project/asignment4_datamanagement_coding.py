# -*- coding: utf-8 -*-
"""Asignment4_DataManagement_Coding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GGo6dlDrUvH-M1474T_1SrJgJcp4tst4
"""

from pyspark.sql import SparkSession
from pyspark.sql import Row

def parseInput(line):
    fields = line.split('|')
    return Row(user_id = int(fields[0]),age = int(fields[1]),gender = fields[2],occupation = fields[3],zip = fields[4])

def thepath(input_path,output_path):
    # Create a SparkSession
    spark = SparkSession.builder.appName("CassandraIntegration").config("spark.cassandra.connection.host", "127.0.0.1").getOrCreate()

    # Get the raw data
    lines = spark.sparkContext.textFile(input_path)

    # Convert it to a RDD of ROW objects with (userID, age, gender, occupation, zip)
    users = lines.map(parseInput)

    # Convert that to a Data frame
    usersDataset = spark.createDataFrame(users)

    # Write it into Cassandra
    usersDataset.write \
        .format("org.apache.spark.sql.cassandra") \
        .mode('append') \
        .options(table="users", keyspace="movielens") \
        .save()

    # Read it back from Cassandra into a new data frame
    readUsers = spark.read \
        .format("org.apache.spark.sql.cassandra") \
        .options(table="users", keyspace="movielens") \
        .load()

    readUsers.createOrReplaceTempView("users")

    # Find all the users where age is less than 20 years old
    sqlDF1 = spark.sql("SELECT * FROM users WHERE age < 20")
    sqlDF1.show(10)

    # Find all the users who have the occupation "scientist" and age between 30 and 40
    sqlDF2 = spark.sql("SELECT * FROM users WHERE occupation = 'scientist' AND age >= 30 AND age <= 40")
    sqlDF2.show(10) #show top 10

    # Save output for Question 1 and Question 2(Already save)
    sqlDF1.write.format("csv").mode('overwrite').save(output_path + "/Agebelow20")
    sqlDF2.write.format("csv").mode('overwrite').save(output_path + "/Scientist")

    # Stop Spark session
    spark.stop()

if __name__ == "__main__":
    input_path = "hdfs:///user/maria_dev/ml-100k/u.user"
    output_path = "hdfs:///user/maria_dev/Asignment_4"
    thepath(input_path, output_path)